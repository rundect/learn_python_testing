
"""
Python Testing с pytest. Начало работы с pytest, Глава 1
https://habr.com/ru/post/448782/
"""
# cd ~/Dropbox/dev/interview/test_assignment/test/pytest/bopytest-code/code/ch1
# pytest test_one.py
"""
-0-
Точка после test_one.py означает, что один тест был запущен, и он прошел. Если вам нужна дополнительная 
информация, вы можете использовать -v или же --verbose:
"""
# pytest -v test_one.py

"""
-1-
Это неудачный тест:
"""
# pytest test_two.py
"""
-2-
И pytest точно сообщает, что первый сбой: index 0 — это несоответствие.
"""

# pytest -v test_two.py
"""
-3-
pytest добавляет символ "карет" (^), чтобы показать нам в чем именно отличие.
"""

"""
-4-
Проект Tasks использует структуру Task, основанную на фабричном методе namedtuple, который является частью 
стандартной библиотеки. Структура задачи используется в качестве структуры данных для передачи информации между 
пользовательским интерфейсом и API
"""


# --------------------------Запускаем pytest
"""
-5-
Без аргументов pytest исследует ваш текущий каталог и все подкаталоги для тестовых файлов и запустит 
тестовый код, который найдёт. Если вы передадите pytest имя файла, имя каталога или список из них, 
то будут найдены там вместо текущего каталога. Каждый каталог, указанный в командной строке, рекурсивно 
исследуется для поиска тестового кода.
"""
# pytest --help


"""
-6-
Вы можете использовать __new __.__ defaults__ для создания объектов Task без указания всех полей. 
Тест test_defaults() предназначен для демонстрации и проверки того, как работают умолчания.

Тест test_member_access() должен продемонстрировать, как обращаться к членам по имени nd не по индексу, 
что является одной из основных причин использования namedtuples.
Давайте добавим еще пару тестов во второй файл, чтобы продемонстрировать функции _asdict() и _replace()
"""

"""
-7-
Для запуска pytest у вас есть возможность указать файлы и каталоги. Если вы не укажете какие-либо файлы или 
каталоги, pytest будет искать тесты в текущем рабочем каталоге и подкаталогах. Он ищет файлы, начинающиеся 
с test_ или заканчивающиеся на _test. Eсли вы запустите pytest из каталога ch1, без команд, вы проведете 
тесты для четырёх файлов
"""
# pytest

"""
-8-
Чтобы выполнить только наши новые тесты задач, вы можете предоставить pytest все имена файлов, которые вы 
хотите запустить, или каталог, или вызвать pytest из каталога, где находятся наши тесты
Часть выполнения pytest, где pytest проходит и находит, какие тесты запускать, называется 
test discovery (тестовым обнаружением). pytest смог найти все те тесты, которые мы хотели запустить, 
потому что мы назвали их в соответствии с соглашениями об именах pytest.
"""
# pytest tasks/test_three.py tasks/test_four.py

"""
-9-
Ниже приведен краткий обзор соглашений об именах, чтобы ваш тестовый код можно было обнаружить с помощью pytest:
    Тестовые файлы должны быть названы test_<something>.py или <something>_test.py.
    Методы и функции тестирования должны быть названы test_<something>.
    Тестовые классы должны быть названы Test<Something>.

"""

"""
-10-
Давайте более подробно рассмотрим результат запуска только одного файла:
pytest test_three.py

===== test session starts ====
pytest предоставляет изящный разделитель для начала тестового сеанса. Сеанс-это один вызов pytest, включая 
все тесты, выполняемые в нескольких каталогах

rootdir: /path/to/code/ch1/tasks, inifile:
rootdir — это самый верхний общий каталог для всех каталогов в которых ищется тестовый код. 
В inifile (здесь пустой) перечислены используемые файлы конфигурации. Конфигурационными файлами 
могут быть pytest.ini, tox.ini или setup.cfg.

collected 2 items
Это две тестовые функции в файле.

test_three.py ..
test_three.py показывает тестируемый файл. Для каждого тестового файла есть одна строка. Две точки 
означают, что тесты пройдены — по одной точке для каждой тестовой функции или метода. Точки предназначены 
только для прохождения тестов. Failures (сбоев), errors (ошибок), skips (пропусков), xfails, и xpasses 
обозначаются с F, E, s, x, и Х, соответственно. Если вы хотите видеть больше точек для прохождения 
тестов, используйте опцию -v или --verbose.

== 2 passed in 0.01 seconds ==
Эта строка относится к числу пройденных тестов и времени, затраченному на весь сеанс тестирования. 
При наличии непроходных тестов здесь также будет указан номер каждой категории.
"""

"""
-11-
Вот возможные результаты тестовой функции:

PASSED (.): Тест выполнен успешно.

FAILED (F): Тест не выполнен успешно (или XPASS + strict).

SKIPPED (s): Тест был пропущен. Вы можете заставить pytest пропустить тест, используя декораторы 
@pytest.mark.skip() или pytest.mark.skipif()

xfail (x): Тест не должен был пройти, был запущен и провалился. Вы можете принудительно указать pytest, 
что тест должен завершиться неудачей, используя декоратор @pytest.mark.xfail()

XPASS (X): Тест не должен был пройти, был запущен и прошел!..

ERROR (E): Исключение произошло за пределами функции тестирования, либо в фикстуре, обсуждается в главе 3, 
pytest Фикстуры, на стр. 49, или в hook function, обсуждается в главе 5, Плагины, на странице 95.
"""

# ---------------------Выполнение Только Одного Теста
"""
-12-
Пожалуй, первое, что вы захотите сделать, после того, как начали писать тесты, — это запустить только 
один. Укажите файл напрямую и добавьте имя ::test_name:
"""
# pytest -v tasks/test_four.py::test_asdict