
"""
Юнит-тесты на Python: Быстрый старт
https://habr.com/ru/company/otus/blog/481806/
"""

"""
-0-
setUp() и tearDown() – это стандартные методы, которые поставляются с фреймворком unittest (они определены в классе 
unittest.TestCase). В зависимости от вашего тестового случая вы можете переопределять или не переопределять два этих 
метода по умолчанию

Хотя это и не обязательно, но как правило я называю тестовый класс с префиксом Test (в нашем случае 
TestCalculator). Ключевым требованием в этом классе является наличие надкласса unittest.TestCase
"""

"""
-1-
Всякий раз, когда выполняется этот тест-кейс, сначала выполняется метод setUp(). В нашем случае мы просто 
создаем объект класса Calculator и сохраняем его как атрибут класса. В родительском классе есть несколько 
других методов по умолчанию, которые мы рассмотрим позже.
На данный момент все, что вы будете делать, это писать методы test_xxx для тестирования каждого метода в 
классе Calculator. Обратите внимание, что все тестовые методы начинаются с префикса test_. Это говорит 
Python с помощью фреймворка unittest, что это методы тестирования. 
"""

"""
-2-

В каждом из методов тестирования я использовал встроенный метод assertEqual, чтобы проверить, возвращают 
ли методы калькулятора ожидаемое значение. Если возвращаемое значение равно ожидаемому значению, то тест 
проходит успешно, в противном случае он завершается неудачей.
Есть множество встроенных методов assert, о которых мы будем говорить позже.
Последняя строка в приведенном выше коде просто запускает тестовый случай TestCalculator. Он выполняет каждый 
тестовый метод, определенный внутри класса, и выдает результат.
"""
# python test_calculator.py -v

