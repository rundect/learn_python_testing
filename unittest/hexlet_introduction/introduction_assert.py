
"""
Мир Python: введение в тестирование
https://ru.hexlet.io/courses/advanced_python/lessons/python_testing_introduction/theory_unit

-0-
Python – язык с динамической типизацией. Это значит, что при написании Python-кода мы явно не указываем тип
данных, а во время исполнения не гарантируется явный тип переменной.
В следствии этого возникают сложности. Например, в функции ожидаем целое число, а нам передали list.
Это может привести к самым неожиданным ошибками. Чтобы попытаться обойти эту проблему стоит воспользоваться assert.
    Assert — это специальная конструкция, позволяющая проверять предположения о значениях произвольных данных
    в произвольном месте программы.
Assert'ы позволяют отлавливать ошибки в программах на этапе компиляции либо во время исполнения.
"""

"""
-1-
Модульное тестирование, или юнит-тестирование (англ. unit testing) — процесс в программировании, позволяющий 
проверить на корректность отдельные модули исходного кода программы. В Python для модульного тестирования применяют:
    PyUnit
    PyTest
    Nose

Интеграцио́нное тестирование или функциональное тестирование предназначено для проверки связи между компонентами, 
а также взаимодействия с различными частями системы (операционной системой, оборудованием либо связи между различными 
системами). Примеры инструментов:
    Bamboo
    Hudson и Jenkins
    CruiseControl
    TeamCity
    BuildBot
    Travis CI
    Team Foundation Server

Основной задачей системного тестирования является проверка как функциональных, так и не функциональных 
требований в системе в целом. Для описания сценариев можно использовать BDD (behavior-driven development)
    pytest-bdd
    behave
    freshen
"""


def simple_func(value):
    assert type(value) == int
    assert value > 0
    return value*value


print(simple_func(2))  # 4
# print(simple_func(set()))  # AssertionError assert type(value) == int
# print(simple_func(-1))  # AssertionError assert value > 0

"""
-1-
Assert вызывает ошибку, если аргумент равен False
"""










