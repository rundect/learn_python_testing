
"""
Мир Python: тестирование с помощью unittest
https://ru.hexlet.io/courses/advanced_python/lessons/python_testing_unittest/theory_unit

-0-
Полезная черта unittest - автоматизированное тестирование. Есть и другие:
    можно собирать тесты в группы
    собирать результаты выполнения тестов (например, для отчета)
    ООП стиль позволяет уменьшить дублирование кода при схожих объектах тестирования
"""

"""
-1-
В использовании unittest присутствуют несколько концепций
test case -это наименьшая единица тестирования. Он проверяет конкретный ответ для конкретного набора входных данных.

test suite представляет собой сборник тестовых случаев, тестовых наборов. Используется для агрегирования тестов, 
которые должны выполняться вместе.

test fixture - это фиксированное состояние объектов используемых в качестве исходного при выполнении тестов.
Цель использования fixture - если у вас сложный test case, то подготовка нужного состояния легко может занимать 
много ресурсов (например, вы считаете функцию с определенной точностью и каждый следующий знак точности в 
расчетах занимает день). Используя fixture (на сленге - фикстуры) предварительную подготовку состояния 
пропускаем и сразу приступаем к тестированию.
Test fixture может выступать, например, в виде:
    состояние базы данных
    набор переменных среды
    набор файлов с необходимым содержанием.

test runner - это компонент, который организует выполнение тестов и предоставляет результат пользователю.
"""

"""
-2-
При написании тестов следует исходить из следующих принципов:
    Работа теста не должна зависеть от результатов работы других тестов.
    Тест должен использовать данные, специально для него подготовленные, и никакие другие.
    Тест не должен требовать ввода от пользователя
    Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично 
    перекрывающие тесты.
    Нашел баг -> напиши тест
    Тесты надо поддерживать в рабочем состоянии
    Модульные тесты не должны проверять производительность сущности (класса, функции)
    Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет 
    себя адекватно при некорректных данных.
    Тесты надо запускать регулярно
"""

"""
-3-
Практика

К написанию тестов стоит относится также как и к основному коду.
Написание тестов является хорошей инвестицией в будущее программы:
    Когда ваша программа становится настолько большой, что не помещается целиком у вас в голове, то это 
    отличный звоночек, что стоит покрывать все тестами
    Если сейчас ваша программа не испытывает проблем, то через какое-то время библиотеки, которые вы используете, 
    могут начать обновляться без обратной совместимости. Вот здесь-то тесты помогут
    Когда вы занимаетесь рефакторингом кода - тесты помогут не сломать лишнего
Есть и другие причины писать тесты. В целом, практика показывает, что до тестов надо дорасти - в какой-то 
момент приходит понимание зачем же тратить на них время.
В качестве примеров использования unittest продемонстрирую и опишу основные возможности модуля. На мой 
взгляд это те 20% которые помогут сделать 80% результата.
"""

"""
-4-
example_1_1.py
В данном примере показан общий шаблон для большинства тестов - здесь и наследование от TestCase, 
здесь и два простых теста, а также перегрузка встроенных в TestCase методов:
    Метод def setUp(self) вызывается ПЕРЕД каждым тестом.
    Метод def tearDown(self) вызывается ПОСЛЕ каждого теста

Список подобных готовых функций такой:
    setUp – подготовка прогона теста; вызывается перед каждым тестом.
    tearDown – вызывается после того, как тест был запущен и результат записан. Метод запускается даже в 
    случае исключения (exception) в теле теста.
    setUpClass – метод вызывается перед запуском всех тестов класса.
    tearDownClass – вызывается после прогона всех тестов класса.
    setUpModule – вызывается перед запуском всех классов модуля.
    tearDownModule – вызывается после прогона всех тестов модуля.
"""

"""
Устаревший псевдоним
https://docs.python.org/3/library/unittest.html#deprecated-aliases
"""







